<?php	// SEASON 1		$banz = array(		'7e3cbd39f9334ff0d3c28aa01008cc52', // fake xkime		md5('jinxflow'),		md5('Urameshi'),		md5('NIGGER<3'),		md5('geodude3'),		'463e56f4c1e1f3b0da35d14c1629005e', // sexkime		md5('Lеonardo'),		md5('RAPHEAL'),		md5('Splinter'),		md5('splinter'),		'cde1fc5c6b1b751f9b09bb057fc76b40', // the		md5('emofag'),		md5('buttfuck'),		md5('Kaneeeda'),		md5('mohammed'),		md5('рrophet'),		md5('youS'),		md5('myD'),		'0e0ec921dc42859d8e9d09f3cc9065b5', // fox		'bb0c78681f10218df83ba378160abba7', // falco		md5('Putin'),		md5('It'),		md5('Slam'),		md5('Jam'),		md5('kazooie')			);		// season winners	$winners = array(		'夢想天衣無縫' => array(							array(0, 'A')						),		'Dorage' => array(						array(0, 'B')						),		'bebop55' => array(						array(0, 'C')						),		'Eiqchi' => array(						array(1, 'A')						),		'KoskiK' => array(						array(1, 'B')						),		'UNPOPU' => array(						array(1, 'C')						)	);		$games = 0;	$pgames = array();	$ranking = array();	$pplaces = array();	$gpd = array();	$gameslist = array();		// leagues	include 'lgs.php';		$date_start = strtotime('2013-03-01 00:00:00');	$date_end = strtotime('2013-04-30 23:59:00');	$paths = array(		//'http://arcturus.su/tenhou/gamerecords/7447/sca',		'http://arcturus.su/tenhou/gamerecords/all/sca'	);		$lobbies = array(		'L7447',		'C5929'	);		for ($i = $date_start; $i <= (time() + 8*60*60 < $date_end ? time() + 8*60*60 : $date_end); $i += 24*60*60) {		$day = date('Ymd', $i);		foreach ($paths as $path) {			$f = fopen($path . $day . '.log', 'rb');						if ($f) {				if (!isset($gpd[$i])) {					$gpd[$i] = 0;				}								while ($line = fgets($f)) {					$ar = explode('|', $line);					$scores = end($ar);										$lobby = trim($ar[0]);					if (!in_array($lobby, $lobbies)) {						continue;					}										$gametype = trim($ar[2]);					// only kuitan ari and kuitan ari fast allowed					if (md5($gametype) != '21670224953821f8a0096236de5b13a7' && md5($gametype) != '38283f7700a3c76ede5e54b0ea4d23d7') {						continue;					}										$peoplez = explode(' ', $scores);										$game = array();					$game_value = 0;						$coef = 1.0; // 0 nonames					$nonames = 0;					foreach ($peoplez as $person) {						if (empty($person)) {							continue;						}												$sc = explode('(', $person);												$points = substr( trim($sc[1]), 0, strlen(trim($sc[1])) - 1);																		if ($sc[0] == 'NoName') {							$game[$sc[0] . '_' . $nonames++] = (int) $points;							$coef -= 0.2;							$game_value += 0.15;						} else {							$game[$sc[0]] = (int) $points;							$league = $leagues[md5($sc[0])]['league'];							if ($league == 'A') {								$game_value += 0.25;							} else if ($league == 'B') {								$game_value += 0.2;							} else {								$game_value += 0.15;							}						}											}										// removing sanma					if (count($game) < 4) {						echo $line;						die();						continue;					}										$pos = 1;					$currgame = array(						'players' => array(),						'date' => $i					);					foreach ($game as $player => $points) {						if (strpos($player, 'NoName', 0) === 0) {													$league = null;												} else if (!array_key_exists($player, $ranking) && !in_array(md5($player), $banz)) {														// The "value" of the game is 0.25 * A player + 0.20 * B player + 0.15 * C player + 0.15 * scrub							// the offset is +10 for A, +20 for B, +30 for C and scrub							// and -20% per NoName (on value, before offset, per NoName)							$league = $leagues[md5($player)]['league'];							if ($league == 'A') {								$offset = 10;							} else if ($league == 'B') {								$offset = 20;							} else {								$offset = 30;							}														$ranking[$player] = ($points * $game_value * $coef) + $offset;							//echo $player . ' ' . $league . '<br />';														$pgames[$player] = 1;							$pplaces[$player] = array(								1 => ($pos == 1 ? 1 : 0),								2 => ($pos == 2 ? 1 : 0),								3 => ($pos == 3 ? 1 : 0),								4 => ($pos == 4 ? 1 : 0),								'avg' => $pos							);						} else if (!in_array(md5($player), $banz)) {							$league = $leagues[md5($player)]['league'];							if ($league == 'A') {								$offset = 10;							} else if ($league == 'B') {								$offset = 20;							} else {								$offset = 30;							}																		$ranking[$player] += ($points * $game_value * $coef) + $offset;							//echo $player . ' ' . $league . '<br />';														$pgames[$player]++;							$pplaces[$player][$pos]++;							$pplaces[$player]['avg'] += $pos;						} else {							$league = 'N';						}												$league = (isset($league) ? $league : 'N');						$currgame['players'][] = array(							'name' => ((strpos($player, 'NoName', 0) === 0) ? 'NoName' : $player),							'league' => $league,							'points' => ((!in_array(md5($player), $banz) && (strpos($player, 'NoName', 0) !== 0)) ? ($points * $game_value * $coef) + $offset : 'X'),							'banned' => in_array(md5($player), $banz)						);												$pos++;					}										$gameslist[] = $currgame;										$games++;					$gpd[$i]++;				}							fclose($f);			} else {				echo 'error';				break;			}		}	}	////////////////////////////////////////	// games list	////////////////////////////////////////	$body = '<table class="table table-striped table-condensed">				<thead>					<tr>						<th>Date</th>						<th>1st</th>						<th>2nd</th>						<th>3rd</th>						<th>4th</th>					</tr>				</thead>				<tbody>';					$gameslist = array_reverse($gameslist);	foreach ($gameslist as $game) {		$body .= '<tr>					<td>' . date('Y/m/d', $game['date']) . '</td>';		foreach ($game['players'] as $player) {			$body .= '<td class="' . ($player['banned'] ? 'ban' : '') . '"><span class="league l_' . $player['league'] . '">' . $player['league'] . '</span> <strong>' . $player['name'] . '</strong> (' . $player['points'] . ')</td>';		}				$body .= '</tr>';	}		$body .= '</tbody></table>';		$f = fopen('gameslist.php', 'w');		if ($f) {		fwrite($f, $body);				fclose($f);			} else {		echo 'error';	}			asort($ranking);	$ranking = array_reverse($ranking);	////////////////////////////////////////	// rankings	////////////////////////////////////////	$body = '<div style="overflow: hidden; margin-bottom: 10px;">				<div style="float: left;">Games played: ' . $games . '</div> 				<div style="float: right;">					<label class="checkbox">						<input type="checkbox" id="only_ranked" /> Show only ranked					</label>				</div>			 </div>						<table class="table table-striped table-condensed tablesorter">		<thead>		<tr>			<th>#</th>			<th>Player</th>			<th>Points</th>			<th>Games</th>			<th class="centered">League</th>			<th>PPG</th>			<th>1st%</th>			<th>2nd%</th>			<th>3rd%</th>			<th>4th%</th>			<th>Avg</th>		</tr>		</thead>		<tbody>';	$header = $body;		// I need number of ranked players first	$rankedplayers = array(		'A' => 1,		'B' => 1,		'C' => 1,		'N' => 1	);		$leaguerankings = array(		'A' => $header,		'B' => $header,		'C' => $header,		'N' => $header	);		$i = 1;			foreach ($ranking as $player => $points) {		$player = trim($player);		if (array_key_exists(md5($player), $leagues)) {			$league = $leagues[md5($player)]['league'];		} else {			$league = 'N';		}				if (!isset($pgames[$player])) { 			continue;		}				$stars = '';		if (array_key_exists($player, $winners)) {			foreach ($winners[$player] as $win) {				if ($win[1] == 'A') {					$color = '339966';				} else if ($win[1] == 'B') {					$color = 'ff9900';				} else if ($win[1] == 'C') {					$color = 'ff6600';				}							$stars .= ' <abbr style="cursor: pointer; color: #' . $color . '; border-bottom: 0px;" title="Winner of Season ' . $win[0] . ', league ' . $win[1] . '">&#9733;</abbr>';			}		}				$leaguerankings[$league] .= '<tr class="' . ($pgames[$player] >= 20 ? 'ranked' : '') . '">';		$leaguerankings[$league] .= '<td>' . ($rankedplayers[$league]++) . '</td>';		$leaguerankings[$league] .= '<td>' . $player . $stars . '</td>';		$leaguerankings[$league] .= '<td>' . $points . '</td>';		$leaguerankings[$league] .= '<td>' . $pgames[$player] . '</td>';		$leaguerankings[$league] .= '<td class="league_'. $league . '">' . $league . '</td>';		$leaguerankings[$league] .= '<td>' . round($points / $pgames[$player], 2) . '</td>';		$leaguerankings[$league] .= '<td>' . round($pplaces[$player][1] / ($pgames[$player] / 100), 2) . '</td>';		$leaguerankings[$league] .= '<td>' . round($pplaces[$player][2] / ($pgames[$player] / 100), 2) . '</td>';		$leaguerankings[$league] .= '<td>' . round($pplaces[$player][3] / ($pgames[$player] / 100), 2) . '</td>';		$leaguerankings[$league] .= '<td>' . round($pplaces[$player][4] / ($pgames[$player] / 100), 2) . '</td>';		$leaguerankings[$league] .= '<td>' . round($pplaces[$player]['avg'] / $pgames[$player], 2) . '</td></tr>';		$body .= '<tr class="' . ($pgames[$player] >= 20 ? 'ranked' : '') . '">';		$body .= '<td>' . ($i++) . '</td>';		$body .= '<td>' . $player . $stars . '</td>';		$body .= '<td>' . $points . '</td>';		$body .= '<td>' . $pgames[$player] . '</td>';		$body .= '<td class="' . ($league != '-' ? 'league_'. $league : '') . '">' . $league . '</td>';		$body .= '<td>' . round($points / $pgames[$player], 2) . '</td>';		$body .= '<td>' . round($pplaces[$player][1] / ($pgames[$player] / 100), 2) . '</td>';		$body .= '<td>' . round($pplaces[$player][2] / ($pgames[$player] / 100), 2) . '</td>';		$body .= '<td>' . round($pplaces[$player][3] / ($pgames[$player] / 100), 2) . '</td>';		$body .= '<td>' . round($pplaces[$player][4] / ($pgames[$player] / 100), 2) . '</td>';		$body .= '<td>' . round($pplaces[$player]['avg'] / $pgames[$player], 2) . '</td></tr>';	}		// add players that are in leagues but have 0 games	foreach ($leagues as $player) {		if (!array_key_exists($player['name'], $ranking)) {			$leaguerankings[$player['league']] .= '<tr class="zerogames">';			$leaguerankings[$player['league']] .= '<td>' . ($rankedplayers[$player['league']]++) . '</td>';			$leaguerankings[$player['league']] .= '<td>' . $player['name'] . '</td>';			$leaguerankings[$player['league']] .= '<td>X</td>';			$leaguerankings[$player['league']] .= '<td>0</td>';			$leaguerankings[$player['league']] .= '<td class="league_'. $player['league'] . '">' . $player['league'] . '</td>';			$leaguerankings[$player['league']] .= '<td>0</td>';			$leaguerankings[$player['league']] .= '<td>0</td>';			$leaguerankings[$player['league']] .= '<td>0</td>';			$leaguerankings[$player['league']] .= '<td>0</td>';			$leaguerankings[$player['league']] .= '<td>0</td>';			$leaguerankings[$player['league']] .= '<td>0</td></tr>';			}	}			$body .= '</tbody></table>' . date('Y/m/d H:i:s');	$leaguerankings['A'] .= '</tbody></table>' . date('Y/m/d H:i:s');	$leaguerankings['B'] .= '</tbody></table>' . date('Y/m/d H:i:s');	$leaguerankings['C'] .= '</tbody></table>' . date('Y/m/d H:i:s');	$leaguerankings['N'] .= '</tbody></table>' . date('Y/m/d H:i:s');	$f = fopen('s02_a.php', 'w');		if ($f) {		fwrite($f, $leaguerankings['A']);				fclose($f);			} else {		echo 'error';	}		$f = fopen('s02_b.php', 'w');		if ($f) {		fwrite($f, $leaguerankings['B']);				fclose($f);			} else {		echo 'error';	}		$f = fopen('s02_c.php', 'w');		if ($f) {		fwrite($f, $leaguerankings['C']);				fclose($f);			} else {		echo 'error';	}		$f = fopen('s02_n.php', 'w');		if ($f) {		fwrite($f, $leaguerankings['N']);				fclose($f);			} else {		echo 'error';	}		$f = fopen('statsfull.php', 'w');		if ($f) {		fwrite($f, $body);				fclose($f);			} else {		echo 'error';	}		////////////////////////////////////////	// graphs	////////////////////////////////////////	$days = '';	$days2 = '';	$gamez = '';	$gamez2 = '';	$threedays = '';	$avges = '';	$day1 = 0;	$day2 = 0;	$day3 = 0;		$i = 1;		foreach ($gpd as $day => $games) {		if (date('m', $day) == '03') { 			$days .= "'" . date('m/d', $day) . "', ";			$gamez .= $games . ', ';	    } else if (date('m', $day) == '04') {			$days2 .= "'" . date('m/d', $day) . "', ";			$gamez2 .= $games . ', ';		}						$threedays .= ($i) . ', ';		if ($i == 1) {			$day1 = $games;			$day2 = $games;			$day3 = $games;		} else if ($i == count($gpd)) {			$day1 = $day2;			$day2 = $games;			$day3 = $games;						$avges .= round(($day1 + $day2 + $day3) / 3, 2) . ', ';		} else {			$day1 = $day2;			$day2 = $day3;			$day3 = $games;						$avges .= round(($day1 + $day2 + $day3) / 3, 2) . ', ';		}				$i++;	}		$days = substr($days, 0, strlen($days) - 2);		$gamez = substr($gamez, 0, strlen($gamez) - 2);	$days2 = substr($days2, 0, strlen($days2) - 2);		$gamez2 = substr($gamez2, 0, strlen($gamez2) - 2);		$threedays = substr($threedays, 0, strlen($threedays) - 2);	$avges = substr($avges, 0, strlen($avges) - 2);		$body = sprintf("<div id=\"games\" style=\"width: 100%%; height: 400px\"></div>					 <div id=\"games2\" style=\"width: 100%%; height: 400px;\"></div>					<div id=\"3dayavg\" style=\"width: 100%%; height: 400px\"></div>		<script type=\"text/javascript\">			var chart1;		$(document).ready(function() {			  chart1 = new Highcharts.Chart({				 chart: {					renderTo: 'games',					type: 'column'				 },				 legend: {					enabled: false				 },				 title: {					text: 'Games per day - March 2013'				 },				 xAxis: {					categories: [%s]				 },				 yAxis: {					title: {					   text: 'games played'					}				 },				 series: [{					name: 'Games',					data: [%s]				 }]			  });			  			  chart2 = new Highcharts.Chart({				 chart: {					renderTo: 'games2',					type: 'column'				 },				 legend: {					enabled: false				 },				 title: {					text: 'Games per day - April 2012'				 },				 xAxis: {					categories: [%s]				 },				 yAxis: {					title: {					   text: 'games played'					}				 },				 series: [{					name: 'Games',					data: [%s]				 }]			  });			  			  			   chart3 = new Highcharts.Chart({				 chart: {					renderTo: '3dayavg',					type: 'line'				 },				 legend: { 					enabled: false				 },				 title: {					text: '3 Day average'				 },				 xAxis: {					categories: [%s],					labels: {						enabled: false					}				 },				 yAxis: {					title: {					   enabled: false,					   text: ''					}				 },				 				 series: [{					name: 'Averages',					data: [%s]				 }]			   });			   		   });		</script>", $days, $gamez, $days2, $gamez2, $threedays, $avges);			$f = fopen('graphs.php', 'w');		if ($f) {		fwrite($f, $body);				fclose($f);			} else {		echo 'error';	}?>